{"mappings":"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","sources":["src/library.js","src/js/render-library.js"],"sourcesContent":["import './js/darktheme';\nimport './js/render-library';\n\nimport './js/page-content-loader';\nimport './js/loader-spinner';\nimport './js/scroll-up-arrow';\nimport './js/modalMovie.js';\n","import { onSpinnerDisabled, onSpinnerEnabled } from './loader-spinner';\nimport { genres } from '../data/genres.json';\nimport { closeModalBtn, backdgop } from './modalMovie';\n// import { closeModalBtn, backdgop, isModalOpen } from './modalMovie';\n\n\nconst emptyLibraryContaineRef = document.querySelector('.library-empty');\nconst libraryListRef = document.querySelector('.library_list');\nconst watchedLibraryBtn = document.querySelector('.js-watched');\nconst queueLibraryBtn = document.querySelector('.js-queue');\n\nlet scrollEventListener = null;\n\n\nonWatchedLibraryBtnClick();\n\nwatchedLibraryBtn.addEventListener('click', onWatchedLibraryBtnClick);\nqueueLibraryBtn.addEventListener('click', onQueueLibraryBtnClick);\ncloseModalBtn.addEventListener('click', updateLibraryMarkup);\ndocument.addEventListener('keyup', event => closeModalOnEscape(event));\nbackdgop.addEventListener('click', event => closeModalOnbackDrop(event));\n\nfunction onWatchedLibraryBtnClick() {\n  queueLibraryBtn.classList.remove('active-button');\n  watchedLibraryBtn.classList.add('active-button');\n\n  libraryListRef.innerHTML = '';\n\n  const parsedWatchedFilms = JSON.parse(localStorage.getItem('watchedList'));\n\n  if (!parsedWatchedFilms || parsedWatchedFilms.length === 0) {\n    emptyLibraryContaineRef.style.display = 'block';\n    return;\n  } else {\n    emptyLibraryContaineRef.style.display = 'none';\n    infinityScroll(parsedWatchedFilms);\n  }\n}\n\nfunction onQueueLibraryBtnClick() {\n  watchedLibraryBtn.classList.remove('active-button');\n  queueLibraryBtn.classList.add('active-button');\n\n  libraryListRef.innerHTML = '';\n\n  const parsedQueueFilms = JSON.parse(localStorage.getItem('queueList'));\n\n  if (!parsedQueueFilms || parsedQueueFilms.length === 0) {\n    emptyLibraryContaineRef.style.display = 'block';\n    return;\n  } else {\n    emptyLibraryContaineRef.style.display = 'none';\n    infinityScroll(parsedQueueFilms);\n  }\n}\n\nfunction createMovieLibraryMarkup({\n  id,\n  title,\n  name,\n  poster_path,\n  genres,\n  release_date,\n  first_air_date,\n  vote_average,\n}) {\n  const genreIds = [];\n  genreIds.push(genres.map(genreId => genreId.id));\n  const genresArr = genreIds[0];\n\n  const markup = `<li class=\"movieCard\" data=\"${id}\">\n      <div class=\"movieCard__img-wrapper\">\n      <img src=\"https://image.tmdb.org/t/p/w500/${poster_path}\"\n        alt=\"${title || name} movie poster\"\n        loading=\"lazy\"\n        class=\"movieCard__img\"\n      />\n      </div>\n      <div class=\"movieCard__text\">\n        <h2 class=\"movieCard__title\">${(title || name).toUpperCase()}</h2>\n        <p class=\"movieCard__info\"> ${genereteGenresList(\n          genresArr\n        )} | ${new Date(release_date || first_air_date).getFullYear()}\n          <span class=\"movieCard__rate\">${vote_average.toFixed(1)}</span></p>\n      </div>\n      </li> `;\n\n  libraryListRef.insertAdjacentHTML('beforeend', markup);\n}\n\nfunction genereteGenresList(ids) {\n  const movieGenres = [];\n  genres.forEach(genre => {\n    if (ids.includes(genre.id)) {\n      movieGenres.push(genre.name);\n    }\n  });\n  if (movieGenres.length > 2) {\n    return `${movieGenres[0]}, ${movieGenres[1]}, Other`;\n  }\n\n  return movieGenres.join(', ');\n}\n\nasync function fetchLibraryMovieByID(id) {\n  const BASE_URL = 'https://api.themoviedb.org/3/';\n  const API_KEY = 'e8d94f3e976148bda0a5c640d4df112b';\n\n  onSpinnerEnabled();\n  const response = await fetch(\n    `${BASE_URL}movie/${id}?api_key=${API_KEY}&language=en-US`\n  );\n  onSpinnerDisabled();\n\n  const data = await response.json();\n\n  return data;\n}\n\n\nfunction updateLibraryMarkup() {\n  removeScrollListener();\n  const parsedWatchedFilms = JSON.parse(localStorage.getItem('watchedList'));\n  const parsedQueueFilms = JSON.parse(localStorage.getItem('queueList'));\n\n  const watchedFilmsEmpty = !parsedWatchedFilms || parsedWatchedFilms.length === 0;\n  const queueFilmsEmpty = !parsedQueueFilms || parsedQueueFilms.length === 0;\n\n  let showEmptyLibrary = false;\n\n\n  if (watchedLibraryBtn.classList.contains('active-button') && watchedFilmsEmpty) {\n    showEmptyLibrary = true;\n  } else if (queueLibraryBtn.classList.contains('active-button') && queueFilmsEmpty) {\n    showEmptyLibrary = true;\n  }\n\n  if (showEmptyLibrary) {\n    libraryListRef.innerHTML = '';\n    emptyLibraryContaineRef.style.display = 'block';\n  } else {\n    emptyLibraryContaineRef.style.display = 'none';\n    libraryListRef.innerHTML = '';\n\n    if (watchedLibraryBtn.classList.contains('active-button')) {\n      // console.log('parsedWatchedFilms', parsedWatchedFilms)\n      infinityScroll(parsedWatchedFilms);\n    } else if (queueLibraryBtn.classList.contains('active-button')) {\n      // console.log('parsedQueueFilms', parsedQueueFilms)\n      infinityScroll(parsedQueueFilms);\n    }\n  }\n  // console.log('isModalOpenBefor', isModalOpen);\n  // isModalOpen = false;\n  // console.log('isModalOpenAfter', isModalOpen);\n}\n\n\nfunction closeModalOnEscape(event) {\n  if (event.code !== 'Escape') {\n    return;\n  }\n    removeScrollListener();\n    updateLibraryMarkup();\n  // if (isModalOpen) {\n  //   removeScrollListener();\n  //   updateLibraryMarkup();\n  // }\n}\n\nfunction closeModalOnbackDrop(event) {\n  if (event.target === event.currentTarget) {\n    removeScrollListener();\n    updateLibraryMarkup();\n  }\n}\n\n\nfunction removeScrollListener() {\n  if (scrollEventListener) {\n    document.removeEventListener('scroll', scrollEventListener);\n    scrollEventListener = null;\n  }\n}\n\nfunction infinityScroll(parsedFilms) {\n  let dynamicStart = 0;\n  const batchSize = 9;\n  \n\n  function loadMoreMovies() {\n    const scrollPosition = window.innerHeight + window.scrollY + 1;\n    const pageHeight = document.body.offsetHeight;\n\n    // Перевіримо, чи доскролили до кінця сторінки і ще є фільми для завантаження\n    if (scrollPosition >= pageHeight && dynamicStart < parsedFilms.length) {\n      loadNextBatch();\n    }\n  }\n  // Додамо власну функцію, яка буде догружати фільми в окремому блоку\n  function loadNextBatch() {\n    const dynamicEnd = Math.min(dynamicStart + batchSize, parsedFilms.length);\n    const slicedMoviesArr = parsedFilms.slice(dynamicStart, dynamicEnd);\n\n    slicedMoviesArr.forEach((id) => {\n      fetchLibraryMovieByID(id).then((data) => {\n        createMovieLibraryMarkup(data);\n      });\n    });\n\n    dynamicStart += batchSize;\n\n        if (dynamicStart < parsedFilms.length) {\n      document.addEventListener('scroll', loadMoreMovies);\n    }\n\n    // console.log('parsedFilms.length', parsedFilms.length);\n    // console.log('dynamicStart', dynamicStart);\n  }\n\n\n  function addScrollListener() {\n    scrollEventListener = loadMoreMovies;\n    document.addEventListener('scroll', scrollEventListener);\n  }\n\n  addScrollListener();\n  loadNextBatch();\n}\n\n\n"],"names":["parcelRequire","$gcQJ6","$9c5a8c3a213c0f0b$var$emptyLibraryContaineRef","document","querySelector","$9c5a8c3a213c0f0b$var$libraryListRef","$9c5a8c3a213c0f0b$var$watchedLibraryBtn","$9c5a8c3a213c0f0b$var$queueLibraryBtn","$9c5a8c3a213c0f0b$var$scrollEventListener","$9c5a8c3a213c0f0b$var$onWatchedLibraryBtnClick","classList","remove","add","innerHTML","parsedWatchedFilms","JSON","parse","localStorage","getItem","length","style","display","$9c5a8c3a213c0f0b$var$infinityScroll","$9c5a8c3a213c0f0b$var$createMovieLibraryMarkup","id","title","name","poster_path","genres","release_date","first_air_date","vote_average","genreIds","push","map","genreId","genresArr","markup","toUpperCase","ids","movieGenres","$aZ3a6","forEach","genre","includes","join","$9c5a8c3a213c0f0b$var$genereteGenresList","Date","getFullYear","toFixed","insertAdjacentHTML","$9c5a8c3a213c0f0b$var$updateLibraryMarkup","$9c5a8c3a213c0f0b$var$removeScrollListener","parsedQueueFilms","watchedFilmsEmpty","queueFilmsEmpty","showEmptyLibrary","contains","removeEventListener","parsedFilms","dynamicStart","loadMoreMovies","window","innerHeight","scrollY","body","offsetHeight","loadNextBatch","dynamicEnd","Math","min","slice","async","onSpinnerEnabled","response","fetch","onSpinnerDisabled","json","$9c5a8c3a213c0f0b$var$fetchLibraryMovieByID","then","data","addEventListener","$8AEpj","closeModalBtn","event","code","$9c5a8c3a213c0f0b$var$closeModalOnEscape","backdgop","target","currentTarget","$9c5a8c3a213c0f0b$var$closeModalOnbackDrop"],"version":3,"file":"library.d6623b4f.js.map"}